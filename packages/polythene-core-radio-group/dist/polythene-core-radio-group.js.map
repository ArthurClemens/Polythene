{"version":3,"file":"polythene-core-radio-group.js","sources":["../../polythene-css-classes/radio-group.js","../src/radio-group.js"],"sourcesContent":["\nexport default {\n  component: \"pe-radio-group\",\n};\n","import { filterSupportedAttributes } from \"polythene-core\";\nimport classes from \"polythene-css-classes/radio-group\";\n\nexport const getElement = vnode =>\n  vnode.attrs.element || \"div\";\n\nexport const getInitialState = (vnode, createStream) => {\n  const checkedIndex = createStream(null);\n  return {\n    checkedIndex,\n    redrawOnUpdate: createStream.merge([checkedIndex])\n  };\n};\n\nexport const createProps = (vnode, { keys: k }) => {\n  const attrs = vnode.attrs;\n  return Object.assign(\n    {},\n    filterSupportedAttributes(attrs),\n    {\n      className: [\n        classes.component,\n        attrs.tone === \"dark\" ? \"pe-dark-tone\" : null,\n        attrs.tone === \"light\" ? \"pe-light-tone\" : null,\n        attrs.className || attrs[k.class],\n      ].join(\" \"),\n    }\n  );\n};\n\nexport const createContent = (vnode, { renderer: h, RadioButton }) => {\n  const attrs = vnode.attrs;\n  const state = vnode.state;\n  const checkedIndex = state.checkedIndex();\n\n  const buttons = attrs.content\n    ? attrs.content\n    : attrs.buttons\n      ? attrs.buttons\n      : attrs.children || vnode.children || [];\n\n  return buttons.length\n    ? buttons.map((buttonOpts, index) => {\n      if (!buttonOpts) {\n        return null;\n      }\n      if (buttonOpts.value === undefined) {\n        console.error(\"Option 'value' not set for radio button\"); // eslint-disable-line no-console\n      }\n      // Only set defaultChecked the first time when no value has been stored yet\n      const isDefaultChecked =\n        (\n          buttonOpts.defaultChecked ||\n          buttonOpts.checked ||\n          (attrs.defaultSelectedValue !== undefined && buttonOpts.value === attrs.defaultSelectedValue)\n        ) && checkedIndex === null;\n      const isChecked = isDefaultChecked || buttonOpts.checked || checkedIndex === index;\n      return h(RadioButton, Object.assign(\n        {},\n        {\n          /* group attributes that may be overwritten by individual buttons */\n          name: attrs.name,\n          key: buttonOpts.value\n        },\n        attrs.all,\n        /* individual button options */\n        buttonOpts,\n        {\n          /* this component's options */\n          onChange: ({ value }) => (\n            state.checkedIndex(index),\n            attrs.onChange && attrs.onChange({ value })\n          ),\n          checked: isChecked\n        }\n      ));\n    })\n    : null;\n};\n"],"names":["component","vnode","attrs","element","createStream","checkedIndex","redrawOnUpdate","merge","keys","k","Object","assign","filterSupportedAttributes","className","classes","tone","class","join","renderer","h","RadioButton","state","buttons","content","children","length","map","buttonOpts","index","undefined","value","console","error","isChecked","defaultChecked","checked","defaultSelectedValue","name","key","all","onChange"],"mappings":"mQACe,CACbA,UAAW,kDCCaC,GACxBA,EAAMC,MAAMC,SAAW,sBAEM,CAACF,EAAOG,WAC/BC,EAAeD,EAAa,YAC3B,CACLC,aAAAA,EACAC,eAAgBF,EAAaG,MAAM,CAACF,kBAIb,CAACJ,GAASO,KAAMC,YACnCP,EAAQD,EAAMC,aACbQ,OAAOC,OACZ,GACAC,4BAA0BV,GAC1B,CACEW,UAAW,CACTC,EAAQd,UACO,SAAfE,EAAMa,KAAkB,eAAiB,KAC1B,UAAfb,EAAMa,KAAmB,gBAAkB,KAC3Cb,EAAMW,WAAaX,EAAMO,EAAEO,QAC3BC,KAAK,sBAKgB,CAAChB,GAASiB,SAAUC,EAAGC,YAAAA,YAC5ClB,EAAQD,EAAMC,MACdmB,EAAQpB,EAAMoB,MACdhB,EAAegB,EAAMhB,eAErBiB,EAAUpB,EAAMqB,QAClBrB,EAAMqB,QACNrB,EAAMoB,QACJpB,EAAMoB,QACNpB,EAAMsB,UAAYvB,EAAMuB,UAAY,UAEnCF,EAAQG,OACXH,EAAQI,IAAI,CAACC,EAAYC,SACpBD,SACI,UAEgBE,IAArBF,EAAWG,OACbC,QAAQC,MAAM,iDASVC,GAJFN,EAAWO,gBACXP,EAAWQ,cACqBN,IAA/B3B,EAAMkC,sBAAsCT,EAAWG,QAAU5B,EAAMkC,uBACpD,OAAjB/B,GAC+BsB,EAAWQ,SAAW9B,IAAiBuB,SACtET,EAAEC,EAAaV,OAAOC,OAC3B,GACA,CAEE0B,KAAMnC,EAAMmC,KACZC,IAAKX,EAAWG,OAElB5B,EAAMqC,IAENZ,EACA,CAEEa,SAAU,EAAGV,MAAAA,MACXT,EAAMhB,aAAauB,GACnB1B,EAAMsC,UAAYtC,EAAMsC,SAAS,CAAEV,MAAAA,KAErCK,QAASF,OAIb"}